.. _isip_ual_matlab:

Matlab UAL expert guide
=======================

General description
-------------------

The Matlab UAL interface is based on the Java UAL: the Matlab functions
are wrappers that call the Java functions, using the fact that Matlab is
able to directly handle Java classes. Since the Java methods manipulate
Java objects, an additional conversion layer is necessary to convert
to/from Matlab structures. There are two types of functions: those that
depend on the version of the data structure and those that do not. The
former are automatically generated from the xml definition of the data
structure (CPODef.xml) through a XSLT processing.

Database functions
------------------

The functions to create, open and close a database are ``euitm_create``,
``euitm_open``, and ``euitm_close`` respectively. These functions just
call the corresponding Java methods. In the case of ``euitm_close``, a
test is performed to detect older versions of the Java UAL that used 4
arguments for the close method.

Type conversion and memory allocation
-------------------------------------

The stylesheet java2matlab.xsl generates a set of functions named
j2m_xxx, where xxx is the name of a CPO. Each of these functions
converts a Java object containing a particular CPO to a Matlab
structure. Since these functions need to know the inner structure of the
CPOs, they must be generated for each version of the data structure.
This process is automated through the Makefile. Note that the XSLT
processing generates a single file called j2m.all that contains a
concatenation of all the conversion functions. This file must then be
split into each individual function thanks to script sp. In a similar
way, the stylesheet matlab2java.xml generates a set of functions called
m2j_xxx, where xxx is the name of a CPO. As above, the XSLT processing
produces a concatenated file called m2j.all that must be split by the
script sp. Each of these functions converts a Matlab structure
containing a particular CPO to a Java object. Additionally, stylesheets
CPO_list.xsl and CPOtimed_list.xsl generate functions that give a list
of all the CPOs and of the timed CPOs respectively.

CPO handling functions
----------------------

An empty Matlab structure corresponding to a particular CPO can be
created with CPO_gen. Internally, the function CPO_gen first calls
CPO_create to create an empty Java CPO, and then calls the j2m_xxx
function to convert it to a Matlab structure. Functions euitm_get and
euitm_get_slice read a CPO from the database and provide it as a Matlab
structure. On the other hand, euitm_put, euitm_put_slice and
euitm_put_non_timed can write Java objects as well as Matlab structures
to the database.

Obsolete functions
------------------

To maintain backward compatibility, we provide a set of functions with
the same names and syntaxes as in older releases:

-  createBD
-  openBD
-  closeBD
-  CPO_get
-  CPO_getResampled
-  CPO_put
-  allocate_xxx

These functions just call the newer versions and emit a warning. These
functions could be eliminated later on.

Installation
------------

When a new version of the data structure appears, the corresponding
Matlab UAL can be generated and installed typing:

::

   make
   make install

The build directory can be cleaned with:

::

   make clean

Testing procedure
-----------------

A test suite can be generated by going to the matlabinterface directory
and typing:

::

   make tests

The full test can then be performed inside Matlab by typing:

::

   euitm_test

This routine tries to write and read every field of every CPO.
Individual CPOs can also be tested with:

::

   test_xxx

where xxx must be replaced with a CPO name (for instance test_coreprof).
All the test functions can be deleted by exiting Matlab and typing:

::

   make clean-tests

